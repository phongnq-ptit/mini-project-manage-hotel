/*
 * This file is generated by jOOQ.
 */
package org.luffy.jooq.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.luffy.jooq.Keys;
import org.luffy.jooq.ManageHotelV2;
import org.luffy.jooq.tables.records.BookedRoomsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookedRooms extends TableImpl<BookedRoomsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>manage_hotel_v2.booked_rooms</code>
     */
    public static final BookedRooms BOOKED_ROOMS = new BookedRooms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookedRoomsRecord> getRecordType() {
        return BookedRoomsRecord.class;
    }

    /**
     * The column <code>manage_hotel_v2.booked_rooms.id</code>.
     */
    public final TableField<BookedRoomsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>manage_hotel_v2.booked_rooms.booking_id</code>.
     */
    public final TableField<BookedRoomsRecord, Integer> BOOKING_ID = createField(DSL.name("booking_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>manage_hotel_v2.booked_rooms.room_id</code>.
     */
    public final TableField<BookedRoomsRecord, Integer> ROOM_ID = createField(DSL.name("room_id"), SQLDataType.INTEGER, this, "");

    private BookedRooms(Name alias, Table<BookedRoomsRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookedRooms(Name alias, Table<BookedRoomsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>manage_hotel_v2.booked_rooms</code> table
     * reference
     */
    public BookedRooms(String alias) {
        this(DSL.name(alias), BOOKED_ROOMS);
    }

    /**
     * Create an aliased <code>manage_hotel_v2.booked_rooms</code> table
     * reference
     */
    public BookedRooms(Name alias) {
        this(alias, BOOKED_ROOMS);
    }

    /**
     * Create a <code>manage_hotel_v2.booked_rooms</code> table reference
     */
    public BookedRooms() {
        this(DSL.name("booked_rooms"), null);
    }

    public <O extends Record> BookedRooms(Table<O> child, ForeignKey<O, BookedRoomsRecord> key) {
        super(child, key, BOOKED_ROOMS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ManageHotelV2.MANAGE_HOTEL_V2;
    }

    @Override
    public Identity<BookedRoomsRecord, Integer> getIdentity() {
        return (Identity<BookedRoomsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookedRoomsRecord> getPrimaryKey() {
        return Keys.KEY_BOOKED_ROOMS_PRIMARY;
    }

    @Override
    public BookedRooms as(String alias) {
        return new BookedRooms(DSL.name(alias), this);
    }

    @Override
    public BookedRooms as(Name alias) {
        return new BookedRooms(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookedRooms rename(String name) {
        return new BookedRooms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookedRooms rename(Name name) {
        return new BookedRooms(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
