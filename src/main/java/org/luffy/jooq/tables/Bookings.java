/*
 * This file is generated by jOOQ.
 */
package org.luffy.jooq.tables;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.luffy.jooq.Keys;
import org.luffy.jooq.ManageHotelV2;
import org.luffy.jooq.tables.records.BookingsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bookings extends TableImpl<BookingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>manage_hotel_v2.bookings</code>
     */
    public static final Bookings BOOKINGS = new Bookings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookingsRecord> getRecordType() {
        return BookingsRecord.class;
    }

    /**
     * The column <code>manage_hotel_v2.bookings.id</code>.
     */
    public final TableField<BookingsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>manage_hotel_v2.bookings.start_date</code>.
     */
    public final TableField<BookingsRecord, LocalDateTime> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>manage_hotel_v2.bookings.end_date</code>.
     */
    public final TableField<BookingsRecord, LocalDateTime> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>manage_hotel_v2.bookings.note</code>.
     */
    public final TableField<BookingsRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>manage_hotel_v2.bookings.status</code>.
     */
    public final TableField<BookingsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(45).defaultValue(DSL.inline("request", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>manage_hotel_v2.bookings.comment</code>.
     */
    public final TableField<BookingsRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>manage_hotel_v2.bookings.star</code>.
     */
    public final TableField<BookingsRecord, Integer> STAR = createField(DSL.name("star"), SQLDataType.INTEGER.defaultValue(DSL.inline("-1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>manage_hotel_v2.bookings.client_id</code>.
     */
    public final TableField<BookingsRecord, Integer> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.INTEGER, this, "");

    private Bookings(Name alias, Table<BookingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bookings(Name alias, Table<BookingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>manage_hotel_v2.bookings</code> table reference
     */
    public Bookings(String alias) {
        this(DSL.name(alias), BOOKINGS);
    }

    /**
     * Create an aliased <code>manage_hotel_v2.bookings</code> table reference
     */
    public Bookings(Name alias) {
        this(alias, BOOKINGS);
    }

    /**
     * Create a <code>manage_hotel_v2.bookings</code> table reference
     */
    public Bookings() {
        this(DSL.name("bookings"), null);
    }

    public <O extends Record> Bookings(Table<O> child, ForeignKey<O, BookingsRecord> key) {
        super(child, key, BOOKINGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ManageHotelV2.MANAGE_HOTEL_V2;
    }

    @Override
    public Identity<BookingsRecord, Integer> getIdentity() {
        return (Identity<BookingsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookingsRecord> getPrimaryKey() {
        return Keys.KEY_BOOKINGS_PRIMARY;
    }

    @Override
    public Bookings as(String alias) {
        return new Bookings(DSL.name(alias), this);
    }

    @Override
    public Bookings as(Name alias) {
        return new Bookings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bookings rename(String name) {
        return new Bookings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bookings rename(Name name) {
        return new Bookings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, LocalDateTime, LocalDateTime, String, String, String, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
