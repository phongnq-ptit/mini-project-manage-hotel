/*
 * This file is generated by jOOQ.
 */
package org.luffy.jooq.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.luffy.jooq.Keys;
import org.luffy.jooq.ManageHotelV2;
import org.luffy.jooq.tables.records.RoomsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rooms extends TableImpl<RoomsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>manage_hotel_v2.rooms</code>
     */
    public static final Rooms ROOMS = new Rooms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoomsRecord> getRecordType() {
        return RoomsRecord.class;
    }

    /**
     * The column <code>manage_hotel_v2.rooms.id</code>.
     */
    public final TableField<RoomsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>manage_hotel_v2.rooms.floor</code>.
     */
    public final TableField<RoomsRecord, Integer> FLOOR = createField(DSL.name("floor"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>manage_hotel_v2.rooms.room_number</code>.
     */
    public final TableField<RoomsRecord, Integer> ROOM_NUMBER = createField(DSL.name("room_number"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>manage_hotel_v2.rooms.room_type</code>.
     */
    public final TableField<RoomsRecord, String> ROOM_TYPE = createField(DSL.name("room_type"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>manage_hotel_v2.rooms.capacity</code>.
     */
    public final TableField<RoomsRecord, Integer> CAPACITY = createField(DSL.name("capacity"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>manage_hotel_v2.rooms.price</code>.
     */
    public final TableField<RoomsRecord, Double> PRICE = createField(DSL.name("price"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>manage_hotel_v2.rooms.description</code>.
     */
    public final TableField<RoomsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>manage_hotel_v2.rooms.note</code>.
     */
    public final TableField<RoomsRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>manage_hotel_v2.rooms.active</code>.
     */
    public final TableField<RoomsRecord, Byte> ACTIVE = createField(DSL.name("active"), SQLDataType.TINYINT.defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    private Rooms(Name alias, Table<RoomsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rooms(Name alias, Table<RoomsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>manage_hotel_v2.rooms</code> table reference
     */
    public Rooms(String alias) {
        this(DSL.name(alias), ROOMS);
    }

    /**
     * Create an aliased <code>manage_hotel_v2.rooms</code> table reference
     */
    public Rooms(Name alias) {
        this(alias, ROOMS);
    }

    /**
     * Create a <code>manage_hotel_v2.rooms</code> table reference
     */
    public Rooms() {
        this(DSL.name("rooms"), null);
    }

    public <O extends Record> Rooms(Table<O> child, ForeignKey<O, RoomsRecord> key) {
        super(child, key, ROOMS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ManageHotelV2.MANAGE_HOTEL_V2;
    }

    @Override
    public Identity<RoomsRecord, Integer> getIdentity() {
        return (Identity<RoomsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RoomsRecord> getPrimaryKey() {
        return Keys.KEY_ROOMS_PRIMARY;
    }

    @Override
    public Rooms as(String alias) {
        return new Rooms(DSL.name(alias), this);
    }

    @Override
    public Rooms as(Name alias) {
        return new Rooms(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rooms rename(String name) {
        return new Rooms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rooms rename(Name name) {
        return new Rooms(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, Integer, String, Integer, Double, String, String, Byte> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
