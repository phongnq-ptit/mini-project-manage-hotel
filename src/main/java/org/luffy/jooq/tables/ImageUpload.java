/*
 * This file is generated by jOOQ.
 */
package org.luffy.jooq.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.luffy.jooq.Keys;
import org.luffy.jooq.ManageHotelV2;
import org.luffy.jooq.tables.records.ImageUploadRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImageUpload extends TableImpl<ImageUploadRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>manage_hotel_v2.image_upload</code>
     */
    public static final ImageUpload IMAGE_UPLOAD = new ImageUpload();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImageUploadRecord> getRecordType() {
        return ImageUploadRecord.class;
    }

    /**
     * The column <code>manage_hotel_v2.image_upload.id</code>.
     */
    public final TableField<ImageUploadRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>manage_hotel_v2.image_upload.key_name</code>.
     */
    public final TableField<ImageUploadRecord, String> KEY_NAME = createField(DSL.name("key_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>manage_hotel_v2.image_upload.file_size</code>.
     */
    public final TableField<ImageUploadRecord, Integer> FILE_SIZE = createField(DSL.name("file_size"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>manage_hotel_v2.image_upload.mimetype</code>.
     */
    public final TableField<ImageUploadRecord, String> MIMETYPE = createField(DSL.name("mimetype"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>manage_hotel_v2.image_upload.original_name</code>.
     */
    public final TableField<ImageUploadRecord, String> ORIGINAL_NAME = createField(DSL.name("original_name"), SQLDataType.VARCHAR(255), this, "");

    private ImageUpload(Name alias, Table<ImageUploadRecord> aliased) {
        this(alias, aliased, null);
    }

    private ImageUpload(Name alias, Table<ImageUploadRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>manage_hotel_v2.image_upload</code> table
     * reference
     */
    public ImageUpload(String alias) {
        this(DSL.name(alias), IMAGE_UPLOAD);
    }

    /**
     * Create an aliased <code>manage_hotel_v2.image_upload</code> table
     * reference
     */
    public ImageUpload(Name alias) {
        this(alias, IMAGE_UPLOAD);
    }

    /**
     * Create a <code>manage_hotel_v2.image_upload</code> table reference
     */
    public ImageUpload() {
        this(DSL.name("image_upload"), null);
    }

    public <O extends Record> ImageUpload(Table<O> child, ForeignKey<O, ImageUploadRecord> key) {
        super(child, key, IMAGE_UPLOAD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ManageHotelV2.MANAGE_HOTEL_V2;
    }

    @Override
    public Identity<ImageUploadRecord, Integer> getIdentity() {
        return (Identity<ImageUploadRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ImageUploadRecord> getPrimaryKey() {
        return Keys.KEY_IMAGE_UPLOAD_PRIMARY;
    }

    @Override
    public ImageUpload as(String alias) {
        return new ImageUpload(DSL.name(alias), this);
    }

    @Override
    public ImageUpload as(Name alias) {
        return new ImageUpload(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ImageUpload rename(String name) {
        return new ImageUpload(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImageUpload rename(Name name) {
        return new ImageUpload(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Integer, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
